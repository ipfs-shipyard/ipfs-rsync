#!/bin/python
import argparse
import re
import sys
import subprocess

args = None

change_re = re.compile(r'[<>ch.][fdLDS][c.+ ?][s.+ ?][t.+ ?][p.+ ?][o.+ ?][g.+ ?][unb.+ ?][a.+ ?][x.+ ?] |\*deleting  ')

def run(command, **kwargs):
    print(command)
    if not 'check' in kwargs and not args.force:
        kwargs['check'] = True
    if args.quiet:
        kwargs['stdout'] = subprocess.DEVNULL
    if not args.dry_run:
        subprocess.run(command, **kwargs)

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('--dry-run', action='store_true', help="don't execute but only show the ipfs commands")
    parser.add_argument('--local-prefix', default='', help="prefix for the path in local fs (default '')")
    parser.add_argument('--ipfs-prefix', default='/', help="prefix for the path in ipfs (default '/')")
    parser.add_argument('--force', '-f', action='store_true', help="don't stop when ipfs commands fail")
    parser.add_argument('--quiet', '-q', action='store_true', help="don't show the outputs of ipfs commands")
    parser.add_argument('--no-tee', action='store_true', help="don't show the outputs of rsync")
    args = parser.parse_args()

    for line in sys.stdin:
        line = line.strip('\n')
        if not args.no_tee:
            print(line)
        change = change_re.match(line)
        if change is None:
            continue
        change = change.group().strip(' ')
        path = line[12:]
        if change == 'cd+++++++++': # New directory
            run(['ipfs', 'files', 'mkdir', '-p', f'{args.ipfs_prefix}{path}'])
        elif change == '>f+++++++++': # New file
            run(['ipfs', 'add', '-q', '--nocopy', '--pin=false', f'--to-files={args.ipfs_prefix}{path}', f'{args.local_prefix}{path}'])
        elif change.startswith('>f'): # Content-changed file
            run(['ipfs', 'files', 'rm', '--force', f'{args.ipfs_prefix}{path}'])
            run(['ipfs', 'repo', 'gc'])
            run(['ipfs', 'add', '-q', '--nocopy', '--pin=false', f'--to-files={args.ipfs_prefix}{path}', f'{args.local_prefix}{path}'])
        elif change == '*deleting': # Deleted file or directory
            run(['ipfs', 'files', 'rm', '-r', '--force', f'{args.ipfs_prefix}{path}'])
            run(['ipfs', 'repo', 'gc'])
        elif change.startswith('.d'): # Attribute-changed directory
            pass
        elif change.startswith('.f'): # Attribute-changed file
            pass
        else:
            print(f'[WARNING] Unrecognized change {change}.')
